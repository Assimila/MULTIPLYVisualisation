#######################################################
#
# GenerateView.py
# Python implementation of the Class GenerateView
# Generated by Enterprise Architect
# Created on:      11-Jun-2019 16:42:05
# Original author: Bethan
#
#######################################################
import dash
import dash
import dash_core_components as dcc
import dash_html_components as html

from src.DataHandling import DataHandling


class GenerateView:
    """This is the class which pulls together the appropriate dash building blocks in
    order to create the dash view.
    """

    def __init__(self, directory):
        """
        Set up the dash app, ready for populating
        """
        self.app = dash.Dash(__name__)

        # Using Bethan's mapbox access token
        # Todo: think about what to do here, is this use of token the best way forward?
        access_token = 'pk.eyJ1IjoiYmV0aGFucGVya2lucyIsImEiOiJpZ1lWQXlzIn0.comSgcNvpNUaLuXE0EOc8A'

        # Pass this directory to the data Handler
        self.dh = DataHandling(directory)

    def run(self):
        """
        Build and run the first instance of the dash application
        :return:
        """
        # Extract the available parameters
        self.create_new_view()

        self.app.run_server(debug=True)

    def add_parameter_to_maps(self):


        self.build_slider()

        pass

    def create_new_view(self):
        """
        Instantiate the setup and layout of the dash app
        :return:
        """
        # Todo: un-hard-code this once we've got the dropdown sorted.
        parameter='lai'
        self.data = self.dh.load_data(parameter)





    def __generate_drowpdown(self):
        pass

    def __generate_maps(self):
        pass

    def __generate_timeseries(self):
        pass

    def show_new_timestep(self):
        pass

    def show_timeseries(self):
        pass

    def build_slider(self):
        """
        Create the slider which displays the timesteps of the data
        :return:
        """
        timesteps = self.data.time.values

        self.slider = dcc.Slider(
            id='time-slider',
            min=timesteps.min().astype('int64'),
            max=timesteps.max().astype('int64'),
            value=timesteps[0].astype('int64'),
            marks={timestep.astype('int64'): str(timestep)[:10] for timestep in timesteps},
            step=None,
        )
